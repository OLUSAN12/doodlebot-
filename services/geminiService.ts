
import { GoogleGenAI } from "@google/genai";
import { DOODLEBOT_PROMPT_TEMPLATE } from '../constants';

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

export const generateColoringPage = async (childRequest: string): Promise<string> => {
    // Fix: Removed explicit API key check to align with guideline to assume API_KEY is always present in the environment.
    
    const fullPrompt = DOODLEBOT_PROMPT_TEMPLATE.replace('{{child_request}}', childRequest);

    try {
        const response = await ai.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: fullPrompt,
            config: {
              numberOfImages: 1,
              outputMimeType: 'image/png',
              aspectRatio: '1:1',
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            const base64ImageBytes = response.generatedImages[0].image.imageBytes;
            return `data:image/png;base64,${base64ImageBytes}`;
        } else {
            throw new Error("No image was generated by the API.");
        }
    } catch (error) {
        console.error("Error calling Gemini API:", error);
        throw new Error("Failed to generate coloring page.");
    }
};
